/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 boy.glb -T 
Files: boy.glb [1.08MB] > /Users/hsuwinlatt/Desktop/Work/Fullstack Empire/Youtube/threed-dev-portfolio/public/models/boy-transformed.glb [495.53KB] (54%)
*/

import { useGLTF } from "@react-three/drei";
import { useRef, useState, useMemo } from "react";
import { useGSAP } from "@gsap/react";
import { gsap } from "gsap";
import * as THREE from "three";
import { SkeletonUtils } from "three-stdlib";

export function AvatarHero2(props) {
  const group = useRef();

  const { scene } = useGLTF("/models/avatarnew.glb");
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);

  const mouse = useRef(new THREE.Vector2());

  const [isIntroAnimationDone, setIsIntroAnimationDone] = useState(false);

  useGSAP(() => {
    if (!isIntroAnimationDone) {
      gsap.fromTo(
        group.current.rotation,
        { y: Math.PI },
        {
          y: 0,
          delay: 0.5,
          duration: 1.5,
          ease: "expo.inOut",
          onComplete: () => setIsIntroAnimationDone(true),
        }
      );
    }

    if (isIntroAnimationDone) {
      const handleMouseMove = (event) => {
        const { innerWidth, innerHeight } = window;
        mouse.current.x = (event.clientX / innerWidth) * 2 - 1;
        mouse.current.y = -(event.clientY / innerHeight) * 2 + 1;

        const target = new THREE.Vector3(mouse.current.x, mouse.current.y, 1);
        const head = group.current.getObjectByName("Head");
        if (head) {
          head.lookAt(target);
        }
        group.current.rotation.y = target.x * 0.5;
      };
      window.addEventListener("mousemove", handleMouseMove);
      return () => window.removeEventListener("mousemove", handleMouseMove);
    }
  }, [isIntroAnimationDone]);

  return (
    <group {...props} ref={group} dispose={null}>
      <primitive object={clone} />
    </group>
  );
}

useGLTF.preload("/models/avatarnew.glb");
